{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>O objetivo deste projeto \u00e9 estudar diferentes algoritmos para obter uma solu\u00e7\u00e3o de alto desempenho.</p>"},{"location":"#alto-desempenho","title":"Alto desempenho","text":"<p>Uma solu\u00e7\u00e3o de alto desempeho depende de tr\u00eas fatores:  </p> <ol> <li>algoritmos eficientes  </li> <li>implementa\u00e7\u00f5es eficientes  </li> <li>paralelismo  </li> </ol>"},{"location":"#problemas","title":"Problemas","text":"<p>Em problemas muito grandes ou complexos, muitas vezes n\u00e3o \u00e9 poss\u00edvel obter uma solu\u00e7\u00e3o decisiva \u00f3tima globalmente, sendo necess\u00e1rio utilizar heur\u00edsticas para encontrar uma solu\u00e7\u00e3o \u00f3tima ou sub-\u00f3tima. O que \u00e9 considerado uma solu\u00e7\u00e3o boa varia de acordo com o problema e o contexto em que ele se encontra, sendo necess\u00e1rio comparar os resultados de diversas heur\u00edsticas.</p>"},{"location":"Problema/","title":"Problema","text":"<p>Para estudar e entender as heuriscas foi criado um problema (Maratona de Filmes) para testar.  </p>"},{"location":"Problema/#maratona-de-filmes","title":"Maratona de Filmes","text":"<p>Retirado do site da materia</p> <p>Voc\u00ea quer passar um final de semana assistindo ao m\u00e1ximo de filmes poss\u00edvel, mas h\u00e1 restri\u00e7\u00f5es quanto aos hor\u00e1rios dispon\u00edveis e ao n\u00famero de t\u00edtulos que podem ser vistos em cada categoria (com\u00e9dia, drama, a\u00e7\u00e3o, etc).  </p> <p>Entrada: Um inteiro N representando o n\u00famero de filmes dispon\u00edveis para assistir e N trios de inteiros (H[i], F[i], C[i]), representando a hora de in\u00edcio, a hora de fim e a categoria do i-\u00e9simo filme. Al\u00e9m disso, um inteiro M representando o n\u00famero de categorias e uma lista de M inteiros representando o n\u00famero m\u00e1ximo de filmes que podem ser assistidos em cada categoria.</p> <p>Sa\u00edda: Um inteiro representando o n\u00famero m\u00e1ximo de filmes que podem ser assistidos de acordo com as restri\u00e7\u00f5es de hor\u00e1rios e n\u00famero m\u00e1ximo por categoria.  </p>"},{"location":"Problema/#exemplo-de-de-input","title":"Exemplo de de input","text":"<p>Como exemplo, considere o seguinte arquivo input.txt gerado:</p> <pre><code>10 4\n1 3 1 2  \n11 13 3  \n14 15 3  \n10 16 2  \n10 14 1  \n11 17 2  \n11 14 3  \n13 15 3  \n14 15 1  \n12 16 4  \n12 13 4  \n</code></pre> <ul> <li>a primeira linha indica a quantidade de filmes (10) e categorias(4);  </li> <li>a segunda linha indica o m\u00e1ximo de filmes que cada categoria pode ter;  </li> <li>da terceira linha em diante, os n filmes, suas respectivas hora de in\u00edcio, hora de t\u00e9rmino e categoria pertencente.  </li> </ul>"},{"location":"estudo/","title":"Estudo PI","text":""},{"location":"estudo/#defina-um-problema-dificil-computacionalmente","title":"Defina um problema dif\u00edcil computacionalmente:","text":"<p>Problemas considerados dif\u00edceis computacionalmente s\u00e3o aqueles em que n\u00e3o h\u00e1 algoritmo conhecido que possa resolv\u00ea-los em tempo polinomial (ou seja, em tempo razo\u00e1vel para entradas grandes). Para resolver esses problemas, geralmente \u00e9 necess\u00e1rio utilizar heur\u00edsticas ou algoritmos de aproxima\u00e7\u00e3o, que fornecem solu\u00e7\u00f5es sub-\u00f3timas em tempo razo\u00e1vel.</p>"},{"location":"estudo/#qual-o-papel-das-heuristicas-na-abordagem-de-obter-solucoes-para-problemas-computacionalmente-dificeis","title":"Qual o papel das heur\u00edsticas na abordagem de obter solu\u00e7\u00f5es para problemas computacionalmente dif\u00edceis?","text":"<p>As heur\u00edsticas s\u00e3o t\u00e9cnicas utilizadas para encontrar solu\u00e7\u00f5es aproximadas para problemas computacionalmente dif\u00edceis, quando n\u00e3o \u00e9 poss\u00edvel encontrar uma solu\u00e7\u00e3o exata em tempo razo\u00e1vel. O papel das heur\u00edsticas \u00e9 fornecer uma solu\u00e7\u00e3o aproximada para o problema, que pode ser utilizada como uma boa aproxima\u00e7\u00e3o da solu\u00e7\u00e3o ideal em muitos casos. Por\u00e9m, \u00e9 importante destacar que as solu\u00e7\u00f5es obtidas por meio de heur\u00edsticas n\u00e3o s\u00e3o garantidamente \u00f3timas, e podem ser menos precisas do que as solu\u00e7\u00f5es exatas, mas ainda assim fornecem uma boa aproxima\u00e7\u00e3o e podem ser muito \u00fateis em muitas situa\u00e7\u00f5es.</p>"},{"location":"estudo/#a-heuristica-gulosa-tem-alguma-garantia-de-otimalidade","title":"A heur\u00edstica gulosa tem alguma garantia de otimalidade?","text":"<p>N\u00e3o, a heur\u00edstica gulosa n\u00e3o tem garantia de otimalidade. A abordagem gulosa \u00e9 uma t\u00e9cnica heur\u00edstica que segue uma estrat\u00e9gia de sele\u00e7\u00e3o de solu\u00e7\u00f5es que parecem ser \u00f3timas a cada passo, sem considerar o impacto de suas escolhas no resultado final. Em outras palavras, a heur\u00edstica gulosa faz escolhas locais \u00f3timas, com a expectativa de que essas escolhas conduzam a uma solu\u00e7\u00e3o global \u00f3tima. No entanto, essa abordagem n\u00e3o garante que a solu\u00e7\u00e3o obtida seja \u00f3tima, nem fornece uma estimativa precisa do qu\u00e3o longe a solu\u00e7\u00e3o est\u00e1 do \u00f3timo global.</p>"},{"location":"estudo/#qual-o-papel-que-a-aleatoriedade-exerce-em-problemas-de-combinacao-discretos","title":"Qual o papel que a aleatoriedade exerce em problemas de combina\u00e7\u00e3o discretos?","text":"<p>A aleatoriedade pode fornecer uma estrat\u00e9gia para explorar diferentes regi\u00f5es do espa\u00e7o de solu\u00e7\u00f5es e evitar ficar preso em \u00f3timos locais ou solu\u00e7\u00f5es sub\u00f3timas. Em outras palavras, a aleatoriedade pode ajudar a escapar de solu\u00e7\u00f5es locais \u00f3timas e encontrar solu\u00e7\u00f5es globalmente melhores.</p> <p>Em alguns casos, a aleatoriedade pode ser usada para gerar solu\u00e7\u00f5es iniciais aleat\u00f3rias para o problema e, em seguida, aplicar heur\u00edsticas determin\u00edsticas ou m\u00e9todos de busca local para refin\u00e1-las e melhorar sua qualidade. Em outros casos, a aleatoriedade pode ser incorporada diretamente na heur\u00edstica, por exemplo, atrav\u00e9s da introdu\u00e7\u00e3o de operadores de muta\u00e7\u00e3o ou crossover aleat\u00f3rios em algoritmos gen\u00e9ticos ou algoritmos evolutivos.</p>"},{"location":"estudo/#a-heuristica-de-busca-local-apresenta-vantagens-em-relacao-a-heuristica-gulosa","title":"A heur\u00edstica de busca local apresenta vantagens em rela\u00e7\u00e3o \u00e0 heur\u00edstica gulosa?","text":"<p>Sim, a heur\u00edstica de busca local apresenta algumas vantagens em rela\u00e7\u00e3o \u00e0 heur\u00edstica gulosa. Enquanto a heur\u00edstica gulosa toma decis\u00f5es com base na escolha localmente \u00f3tima em cada etapa do processo de constru\u00e7\u00e3o da solu\u00e7\u00e3o, a busca local \u00e9 uma t\u00e9cnica que tenta melhorar iterativamente uma solu\u00e7\u00e3o inicial por meio da explora\u00e7\u00e3o de vizinhan\u00e7as pr\u00f3ximas.</p>"},{"location":"estudo/#no-valgrind-qual-o-papel-do-indicador-ir","title":"No Valgrind, qual o papel do indicador IR?","text":"<p>No Valgrind, o indicador IR significa \"Instruction Reads\" (leituras de instru\u00e7\u00f5es) e \u00e9 uma das estat\u00edsticas de desempenho coletadas pelo Valgrind. Ele representa o n\u00famero de leituras de instru\u00e7\u00f5es feitas pela CPU enquanto o programa \u00e9 executado em um ambiente simulado pelo Valgrind. Essa informa\u00e7\u00e3o \u00e9 \u00fatil para entender como o c\u00f3digo est\u00e1 sendo executado e para identificar poss\u00edveis gargalos de desempenho, como la\u00e7os de repeti\u00e7\u00e3o ineficientes ou acessos desnecess\u00e1rios \u00e0 mem\u00f3ria.</p>"},{"location":"estudo/#se-um-problema-e-30-sequencial-qual-o-speedup-maximo-que-ele-pode-ter-ao-paralelizarmos","title":"Se um problema \u00e9 30% sequencial, qual o speedup m\u00e1ximo que ele pode ter ao paralelizarmos?","text":"<p>Se um problema \u00e9 30% sequencial, isso significa que apenas 70% do problema pode ser paralelizado, j\u00e1 que 30% do tempo de execu\u00e7\u00e3o ser\u00e1 sempre sequencial e n\u00e3o poder\u00e1 ser acelerado pelo paralelismo.</p> <ul> <li> <p>O speedup m\u00e1ximo que poder\u00edamos alcan\u00e7ar seria dado pela Lei de Amdahl, que \u00e9 dada pela f\u00f3rmula:</p> </li> <li> <p>Speedup m\u00e1ximo = 1 / (1 - P), onde P \u00e9 a fra\u00e7\u00e3o sequencial do problema.</p> </li> <li> <p>Substituindo os valores, temos:</p> </li> <li> <p>Speedup m\u00e1ximo = 1 / (1 - 0,3) = 1 / 0,7 = 1,43</p> </li> </ul> <p>Portanto, o speedup m\u00e1ximo que poder\u00edamos alcan\u00e7ar seria de 1,43 vezes, ou seja, uma acelera\u00e7\u00e3o de at\u00e9 43% em rela\u00e7\u00e3o \u00e0 vers\u00e3o sequencial do problema. Note que esse valor \u00e9 um limite superior te\u00f3rico, e o speedup real alcan\u00e7ado pode ser menor devido a fatores como a sobrecarga de comunica\u00e7\u00e3o entre as partes paralelas e outras limita\u00e7\u00f5es do sistema.</p>"},{"location":"estudo/#quais-vantagens-e-desvantagens-da-passagem-de-parametros-por-referencia","title":"Quais vantagens e desvantagens da passagem de par\u00e2metros por refer\u00eancia?","text":"<p>A passagem de par\u00e2metros por refer\u00eancia \u00e9 uma t\u00e9cnica utilizada em linguagens de programa\u00e7\u00e3o para que uma fun\u00e7\u00e3o possa acessar e modificar o valor de uma vari\u00e1vel ou objeto que est\u00e1 fora do seu escopo.</p> <p>Vantagens:</p> <ul> <li>Economia de mem\u00f3ria: como a fun\u00e7\u00e3o recebe uma refer\u00eancia ao valor original, e n\u00e3o uma c\u00f3pia do valor, \u00e9 poss\u00edvel economizar mem\u00f3ria.</li> <li>Efici\u00eancia: a passagem de par\u00e2metros por refer\u00eancia pode ser mais r\u00e1pida do que a passagem por valor em alguns casos.</li> <li>Modifica\u00e7\u00e3o do valor original: a fun\u00e7\u00e3o pode modificar o valor original do objeto ou vari\u00e1vel, o que \u00e9 \u00fatil em situa\u00e7\u00f5es em que se deseja alterar o estado de um objeto ou retornar mais de um valor da fun\u00e7\u00e3o.</li> </ul> <p>Desvantagens:</p> <ul> <li>Alterar objeto original: a fun\u00e7\u00e3o pode inadvertidamente modificar o valor original do objeto.</li> <li>Risco de vazamentos de mem\u00f3ria: se a fun\u00e7\u00e3o n\u00e3o for cuidadosamente implementada, pode ocorrer o risco de vazamento de mem\u00f3ria.</li> </ul>"},{"location":"estudo/#na-aula-sobre-valgrind-nos-vimos-formas-diferentes-de-somar-os-numeros-de-uma-matriz-qual-a-razao-para-a-diferenca-de-performance","title":"Na aula sobre valgrind, n\u00f3s vimos formas diferentes de somar os n\u00fameros de uma matriz. Qual a raz\u00e3o para a diferen\u00e7a de performance?","text":"<p>O problema \u00e9 a grava\u00e7\u00e3o na mem\u00f3ria do array: x[i][j]. Aqui est\u00e1 um pouco de perspectiva sobre o porqu\u00ea:  </p> <p>Voc\u00ea tem um array bidimensional, mas a mem\u00f3ria do computador \u00e9 inerentemente unidimensional. Ent\u00e3o, embora voc\u00ea imagine seu array assim:</p> <pre><code>0,0 | 0,1 | 0,2 | 0,3\n----+-----+-----+----\n1,0 | 1,1 | 1,2 | 1,3\n----+-----+-----+----\n2,0 | 2,1 | 2,2 | 2,3\n</code></pre> <p>Seu computador armazena isso na mem\u00f3ria como uma \u00fanica linha:</p> <pre><code>0,0 | 0,1 | 0,2 | 0,3 | 1,0 | 1,1 | 1,2 | 1,3 | 2,0 | 2,1 | 2,2 | 2,3\n</code></pre> <p>No segundo exemplo, voc\u00ea acessa o array fazendo um loop sobre o segundo n\u00famero primeiro, ou seja:</p> <pre><code>x[0][0] \n        x[0][1]\n                x[0][2]\n                        x[0][3]\n                                x[1][0] etc...\n</code></pre> <p>O que significa que voc\u00ea est\u00e1 acessando todos eles em ordem. Agora olhe para a primeira vers\u00e3o. Voc\u00ea est\u00e1 fazendo:</p> <pre><code>x[0][0]\n                                x[1][0]\n                                                                x[2][0]\n        x[0][1]\n                                        x[1][1] etc...\n</code></pre> <p>Devido \u00e0 maneira como C organizou o array bidimensional na mem\u00f3ria, voc\u00ea est\u00e1 pedindo para ele pular para todo lugar. Mas agora vem a surpresa: Por que isso importa? Todos os acessos \u00e0 mem\u00f3ria s\u00e3o iguais, certo?</p> <p>N\u00e3o, por causa das caches. Os dados da mem\u00f3ria s\u00e3o trazidos para a CPU em pequenos pacotes (chamados de \"linhas de cache\"), geralmente com 64 bytes. Se voc\u00ea tem inteiros de 4 bytes, isso significa que voc\u00ea est\u00e1 recebendo 16 inteiros consecutivos em um pacote organizado. \u00c9 na verdade bastante lento buscar esses pacotes de mem\u00f3ria; a CPU pode fazer muito trabalho no tempo que leva para carregar uma \u00fanica linha de cache.</p> <p>Agora olhe de volta para a ordem dos acessos: O segundo exemplo est\u00e1 (1) pegando um pacote de 16 inteiros, (2) modificando todos eles, (3) repetindo 4000*4000/16 vezes. Isso \u00e9 agrad\u00e1vel e r\u00e1pido, e a CPU sempre tem algo para trabalhar.</p> <p>O primeiro exemplo est\u00e1 (1) pegando um pacote de 16 inteiros, (2) modificando apenas um deles, (3) repetindo 4000*4000 vezes. Isso vai exigir 16 vezes mais \"buscas\" na mem\u00f3ria. Sua CPU na verdade ter\u00e1 que gastar tempo esperando que essa mem\u00f3ria apare\u00e7a, e enquanto isso estiver acontecendo, voc\u00ea est\u00e1 perdendo um tempo valioso.</p>"},{"location":"estudo/#como-se-da-a-heuristica-por-algoritmos-geneticos-qual-o-papel-da-mutacao","title":"Como se d\u00e1 a heur\u00edstica por algoritmos gen\u00e9ticos? Qual o papel da muta\u00e7\u00e3o?","text":"<p>A heur\u00edstica por algoritmos gen\u00e9ticos utiliza opera\u00e7\u00f5es de sele\u00e7\u00e3o, cruzamento e muta\u00e7\u00e3o para gerar novas solu\u00e7\u00f5es candidatas para um determinado problema. Inicialmente, \u00e9 criada uma popula\u00e7\u00e3o de solu\u00e7\u00f5es aleat\u00f3rias. Em seguida, \u00e9 realizada uma avalia\u00e7\u00e3o de cada solu\u00e7\u00e3o candidata, atribuindo-lhe um valor de aptid\u00e3o ou fitness, que indica o qu\u00e3o boa \u00e9 aquela solu\u00e7\u00e3o em rela\u00e7\u00e3o ao problema em quest\u00e3o.</p> <p>A partir da avalia\u00e7\u00e3o, \u00e9 selecionada uma parte da popula\u00e7\u00e3o (normalmente as solu\u00e7\u00f5es mais aptas) para cruzamento. O cruzamento consiste em combinar caracter\u00edsticas de duas ou mais solu\u00e7\u00f5es, gerando uma nova solu\u00e7\u00e3o candidata. Por fim, \u00e9 realizada uma muta\u00e7\u00e3o, que introduz uma pequena altera\u00e7\u00e3o aleat\u00f3ria em algumas das caracter\u00edsticas da solu\u00e7\u00e3o gerada pelo cruzamento. Esse processo \u00e9 repetido at\u00e9 que uma solu\u00e7\u00e3o satisfat\u00f3ria seja encontrada ou que o n\u00famero m\u00e1ximo de itera\u00e7\u00f5es seja atingido.</p> <p>O papel da muta\u00e7\u00e3o \u00e9 introduzir diversidade na popula\u00e7\u00e3o, evitando que todas as solu\u00e7\u00f5es se tornem muito semelhantes umas \u00e0s outras. Sem muta\u00e7\u00e3o, a busca por solu\u00e7\u00f5es \u00f3timas poderia ficar presa em um m\u00ednimo local, sem conseguir explorar outras regi\u00f5es do espa\u00e7o de solu\u00e7\u00f5es.</p>"},{"location":"estudo/#na-busca-exaustiva-a-profundidade-de-busca-afeta-consideravelmente-o-resultado-obtido-explique-com-suas-palavras-a-importancia-de-se-buscar-conhecer-uma-profundidade-razoavel-de-busca","title":"Na busca exaustiva, a profundidade de busca afeta consideravelmente o resultado obtido. Explique com suas palavras a import\u00e2ncia de se buscar conhecer uma profundidade razo\u00e1vel de busca?","text":"<p>A profundidade de busca na busca exaustiva \u00e9 um fator crucial para obter resultados satisfat\u00f3rios. Se a profundidade for muito rasa, o algoritmo pode n\u00e3o ser capaz de explorar todas as solu\u00e7\u00f5es poss\u00edveis e, portanto, pode n\u00e3o encontrar a solu\u00e7\u00e3o \u00f3tima. Por outro lado, se a profundidade for muito grande, o algoritmo pode levar muito tempo para explorar todas as solu\u00e7\u00f5es poss\u00edveis, uma fez que a arvore cresce exponecialmente em rela\u00e7\u00e3o a profundidade, o que pode n\u00e3o ser vi\u00e1vel em termos de tempo e recursos computacionais.</p>"},{"location":"estudo/#explore-x-exploit","title":"Explore x Exploit","text":"<p>\"Explore\" se refere a uma estrat\u00e9gia que envolve explorar novas op\u00e7\u00f5es e adquirir novas informa\u00e7\u00f5es para reduzir a incerteza ou aumentar o conhecimento sobre o ambiente ou o problema em quest\u00e3o. (aumentar espa\u00e7o de solu\u00e7\u00f5es)</p> <p>\"Exploit\" se refere a uma estrat\u00e9gia que envolve aproveitar ao m\u00e1ximo as informa\u00e7\u00f5es existentes e as op\u00e7\u00f5es conhecidas para maximizar a recompensa ou minimizar a perda.</p>"},{"location":"metodologia/","title":"Metodologia","text":"<p>Para todas as heur\u00edsticas, foram utilizados os mesmos arquivos de entrada, modelo de sa\u00edda e simplifica\u00e7\u00f5es gerais, embora possam existir simplifica\u00e7\u00f5es ou limita\u00e7\u00f5es espec\u00edficas descritas em sua implementa\u00e7\u00e3o.</p>"},{"location":"metodologia/#inputs","title":"Inputs","text":"<p>Utilizou-se um gerador de entradas que criou diversos arquivos, variando os par\u00e2metros, quantidade de filmes, categorias e limite de filmes por categoria, al\u00e9m de gerar filmes aleat\u00f3rios (com hor\u00e1rio de in\u00edcio, fim e categoria).</p>"},{"location":"metodologia/#especificacoes","title":"Especifica\u00e7\u00f5es:","text":"<ul> <li>Quantidade de filmes: 10 - 100000000</li> <li>Quantidade de categorias: 1 - 9</li> <li>Limite de filme: </li> <li>Dura\u00e7\u00e3o dos filmes: </li> </ul>"},{"location":"metodologia/#ex","title":"Ex:","text":"<pre><code>10 4\n1 3 1 2  \n11 13 3  \n14 15 3  \n10 16 2  \n10 14 1  \n11 17 2  \n11 14 3  \n13 15 3  \n14 15 1  \n12 16 4  \n</code></pre>"},{"location":"metodologia/#simplificacoes-do-problema","title":"Simplifica\u00e7\u00f5es do problema","text":"<p>Para simplificar o problema, n\u00e3o foi imposto um m\u00ednimo de filmes por categoria, e tamb\u00e9m n\u00e3o foram considerados filmes que terminassem no dia seguinte, uma vez que isso aumentaria significativamente a complexidade do desenvolvimento das heur\u00edsticas.</p>"},{"location":"metodologia/#outputs","title":"Outputs","text":"<p>Para cada arquivo de entrada, gerou-se um arquivo de sa\u00edda contendo informa\u00e7\u00f5es sobre o input recebido e m\u00e9tricas de desempenho no modelo: quantidade de filmes, quantidade de categorias, tempo de processamento e tempo de exibi\u00e7\u00e3o. O tempo de processamento refere-se ao tempo em microssegundos que o algoritmo levou para gerar o output, enquanto o tempo de exibi\u00e7\u00e3o \u00e9 a soma da dura\u00e7\u00e3o de todos os filmes assistidos.</p>"},{"location":"metodologia/#ex_1","title":"Ex:","text":"<pre><code>(1000 6 0002 17)\n</code></pre>"},{"location":"heuristicas/Aleatoria/","title":"Aleatoria","text":""},{"location":"heuristicas/Aleatoria/#definicao","title":"Defini\u00e7\u00e3o","text":"<p>Heur\u00edstica aleat\u00f3ria \u00e9 um algoritimo de busca que utiliza elementos aleat\u00f3rios em seu processo de busca por solu\u00e7\u00f5es.</p> <p>O algoritimo utiliza a aleatoriedade para explorar o espa\u00e7o de busca de forma ampla e diversificada, em vez de se concentrar em um caminho espec\u00edfico. Isso permite que a heur\u00edstica encontre solu\u00e7\u00f5es que podem ser menos \u00f3bvias que seriam ignoradas por outras mais determin\u00edsticas.</p>"},{"location":"heuristicas/Aleatoria/#vantagens","title":"Vantagens","text":"<ul> <li>Explora\u00e7\u00e3o ampla: explora o espa\u00e7o de busca de forma ampla, maior as chances de encontrar solu\u00e7\u00f5es menos \u00f3bvias.</li> <li>Flexibilidade: n\u00e3o segue uma estrat\u00e9gia determin\u00edstica, \u00e9 mais flex\u00edvel em termos de adapta\u00e7\u00e3o podendo ser aplicada em uma ampla variedade de contextos.</li> </ul>"},{"location":"heuristicas/Aleatoria/#desvantagens","title":"Desvantagens","text":"<ul> <li>Solu\u00e7\u00f5es sub-\u00f3timas: A escolha aleat\u00f3ria de op\u00e7\u00f5es pode levar a solu\u00e7\u00f5es sub-\u00f3timas.</li> <li>Lentid\u00e3o: Pode precisar avaliar um grande n\u00famero de solu\u00e7\u00f5es antes de encontrar uma solu\u00e7\u00e3o aceit\u00e1vel.</li> </ul>"},{"location":"heuristicas/Aleatoria/#implementacao","title":"Implementa\u00e7\u00e3o","text":""},{"location":"heuristicas/Aleatoria/#desempenho","title":"Desempenho","text":""},{"location":"heuristicas/Aleatoria/#resultados","title":"Resultados","text":""},{"location":"heuristicas/Gulosa/","title":"Gulosa","text":""},{"location":"heuristicas/Gulosa/#definicao","title":"Defini\u00e7\u00e3o","text":"<p>Heur\u00edstica gulosa \u00e9 um algoritmo de busca (greedy) que segue um processo unico de sele\u00e7\u00e3o em cada passo.</p> <p>O algoritmo possui uma regra de decis\u00e3o unica e a aplica a cada passo, seleciona a op\u00e7\u00e3o valida que aparecer primeiro, sem levar em considera\u00e7\u00e3o o impacto de longo prazo dessa escolha. Dessa forma, a heur\u00edstica gulosa busca maximizar uma fun\u00e7\u00e3o objetivo ou minimizar um custo de forma incremental, esperando que a soma das escolhas locais leve a uma solu\u00e7\u00e3o aceit\u00e1vel, uma vez que pode terminar antes de observar diver\u00e7as op\u00e7\u00f5es.</p>"},{"location":"heuristicas/Gulosa/#vantagens","title":"Vantagens","text":"<ul> <li>Efici\u00eancia: as heur\u00edsticas gulosas geralmente s\u00e3o algoritmos de baixa complexidade computacional.</li> <li>Facilidade de implementa\u00e7\u00e3o: em compara\u00e7\u00e3o com outras t\u00e9cnicas de otimiza\u00e7\u00e3o, as heur\u00edsticas gulosas s\u00e3o relativamente f\u00e1ceis de implementar.</li> </ul>"},{"location":"heuristicas/Gulosa/#desvantagens","title":"Desvantagens","text":"<ul> <li>Solu\u00e7\u00f5es sub-\u00f3timas: a baixa explora\u00e7\u00e3o favorece a melhor op\u00e7\u00e3o local, ignora op\u00e7\u00f5es que parecem menos vantajosas no momento, mas que poderiam levar a uma solu\u00e7\u00e3o global melhor.</li> </ul>"},{"location":"heuristicas/Gulosa/#implementacao","title":"Implementa\u00e7\u00e3o","text":""},{"location":"heuristicas/Gulosa/#desempenho","title":"Desempenho","text":""},{"location":"heuristicas/Gulosa/#resultados","title":"Resultados","text":""}]}